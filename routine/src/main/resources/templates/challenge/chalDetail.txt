
부트스트랩 등의 라이브러리는 선언되어 있다고 가정
부트스트랩과 적절한 부트스트랩 아이콘 등으로 간단하게 꾸미기

챌린지 객체 : 
public class ChallengeResponse {
    private int chalNo;
    private String title;
    private String content;
    private byte[] thumbnail;
    private String thumbnailBase64; //프론트와 base64로 썸네일 파일 통신
    
    private LocalDateTime createDate;
    private int verifyCycle;
    private LocalDate startDate;
    private LocalDate endDate;
    private String status; //Y:활성화 N:종료됨 D:삭제됨
    private String pictureRequired; //I:직접 촬영한 사진 필수 Y:필수 O:선택 N:불가
    private String replyRequired; //Y:필수 O:선택 N:불가
    
    private String categoryName; //challenge_category

    private String nick; //member
    
    private byte[] picture; //profile
    private String pictureBase64;
    
    private int participateCount; //challenge_participation
    private Double successRatio; //challenge_participation, 백분율
    private Double failRatio; //challenge_participation, 백분율
    
    //-----세부 조회용 요소-----
    private int userNo;
    private int categoryNo;
    
    private int successCount; //challenge_participation
    private int failCount;
    
    private String bio; //profile
    private String isOpen; //Y:공개, N:참여한 챌린지 비공개, A:익명
    
    //이 챌린지에 현재 접속한 사람이 참여중임?
    private String loginUserIsParticipation;
      // Y:참여중, S:성공, F:실패, N:미참여, U:로그인 안함
    
    /*
    * verifyCycle 인증 주기
    * 0 : 없음
    * 1~127 : 특정 요일 선택(비트마스크)
    * -월요일 : 1, 화요일 : 2, ..., 일요일 : 64
    * 
    * 201 : 매일
    * 202 : 이틀
    * 203 : 사흘
    * 211 : 매주
    * 212 : 2주
    * 221 : 매달
    * 
    */
}

챌린지 게시글 상세보기 배치
ChallengeResponse 단일 객체가 model의 chalDetail에 담김
-------------------------------------
뒤로 가기(goback(-1)) 버튼 / model의 loginUser가 존재할 경우
  , loginUser.userNo와 chalDetail.userNo가 동일하고, status가 Y인 경우 '수정하기' @{/challenge/updateChal}, '종료하기' @{/challenge/closeChal}
  , '삭제하기' @{/challenge/deleteChal} 버튼. 수정/삭제/종료 버튼은 누르면 chalDetail.chalNo를 chalNo이름으로 가지고 get요청
  수정 버튼은 동기식(서버에서 페이지 이동함), 삭제/종료 버튼은 확인 모달창 검증 후 비동기식 axios 응답 : 'success' - 성공, goback(-1). 'fail' - 실패. 실패했다는 alert띄우기
제목(title) /상태(status) : Y:(표시하지 않음) N:종료 
  / 카테고리 이름(categoryName) : categoryNo를 보고, 십의 자리가 같은 숫자 중 일의 자리가 0인 카테고리 이름을 왼쪽에 병기(예 : categoryNo가 23이면 categoryNo가 20인 카테고리의 categoryName을 옆에 함께 표시)
  / 썸네일(thumbnailBase64) : base64로 인코딩된 webp바이너리 데이터. 만일 없을 경우, 브라우저 로컬 스토리지(서버에서 받아오지 않음!)에 challengeDefaultImage라는 key로 저장된 base64인코딩된 사진을 대신 사용
내용(content) : html태그를 이스케이프 하지 않고 그대로 랜더링.
작성일(createDate) / 시작일(startDate) / 종료일(endDate) : 종료일이 null일 경우 "누군가 사과나무를 심는 그날까지" 대신 출력
인증 주기(verifyCycleStr)
  / 인증 사진 필수 여부(pictureRequired) : I:직접 촬영한 사진 필수 Y:필수 O:선택 N:불가
  / 인증 텍스트 필수 여부(replyRequired) : Y:필수 O:선택 N:불가
--------------------------------------
참여 회원 영역 - participateCount가 0일 경우, '아무도 참여하지 않았어요' 만 표시
도넛 모양 다이어그램 사용, 성공률(successRatio) : 파란색
  / 진행률(100-failRatio-successRatio) : 초록색
  / 실패율(failRatio) : 빨간색
각 비율은 서버에서 소숫점 두 자리까지 백분률로 조회됨
성공률, 진행률, 실패율을 마우스 호버링하면 각각 participateCount, participateCount-successCount-failCount 표시
--------------------------------------
챌린지 작성자 영역 - isOpen가 A인 경우, '익명의 ROUTINE유저가 생성했어요' 만 표시
닉네임(nick) / 프로필 사진(profilePictureBase64) : 작은 원형 액자에 base64로 인코딩된 프로필 사진 넣기
자기소개(bio) : 최대 100자까지 서버에서 보냄
isOpen이 Y일 경우, 작성자 영역을 클릭하면 '@{/profile/profileDetail}'로 userNo를 가지고 axios동기식 get요청
--------------------------------------

챌린지 영역
참여 회원 영역
챌린지 작성자 영역
순으로 세로 배치

사용되지 않은 객체 요소는 임의로 추가하지 말것
스크립트는 leftScript()함수로 감싸기
thymeleaf조각이라 스크립트 내 thymeleaf문법 사용 불가.
thymeleaf변수를 사용하려면 별도로 선언하기
id는 반드시 'left-'로 시작(id 충돌 방지)
css를 사용할 때는 id로 연결하기

날짜를 출력할 때는 thymeleaf-extras-java8time(#temporals.format)를 사용해서 적절한 포맷으로 출력



============================================================================================

부트스트랩 등의 라이브러리는 선언되어 있다고 가정
부트스트랩과 적절한 부트스트랩 아이콘 등으로 간단하게 꾸미기
챌린지 참여/댓글 카드 순으로 보인다.

챌린지 참여 영역
------------------------------------
chalDetail.loginUserIsParticipation(model에 chalDetail로 들어간 객체) 값에 따라 표시되는 내용이 다름
Y: 댓글 작성 영역 표시. 
  먼저 로그인한 유저 프로필사진(myProfile.pictureBase64) - base64로 인코딩됨 / 유저 닉네임 loginUser.nick 표시
  사진 첨부 영역. 사진 첨부하면 해당 사진 썸네일 표시
    - chalDetail.pictureRequired가 I/Y 이면 사진 첨부 필수, O 이면 선택, N 이면 사진 첨부 영역 표시하지 않음.
    - 사진은 업로드되는 즉시 리사이즈(1200x1200px이하, 200kb이하)
    - 리사이즈 후 바로 axios로 contextPath+'/attachment/insertComment' axios 비동기POST요청
    - 파라미터 : 사진은 MultipartFile, chalDetail.chalNo를 chalNo라는 이름으로 보냄
    - 응답으로 uuidStr를 보냄. 해당 uuidStr를 댓글 텍스트를 제출할 때 함께 제출
    - 응답으로 "joongBock"을 받을 경우, '직접 촬영한 사진만 올려주세요' 경고 모달 창 표시
    - 응답으로 "fail" : 500err
    - 응답이 오기 전까지 댓글 작성 버튼 비활성화
  댓글 텍스트 작성 영역. 최대 1000글자 작성 가능. 현재 작성 글자수/최대 작성 글자수 표시
    - chalDetail.replyRequired가 Y이면 댓글 내용 필수, O이면 선택, N이면 텍스트 작성 영역 표시하지 않음
    - 만일 대댓글이라면 chalDetailComment.commentNo를 recommentTarget이라는 파라미터 추가
  댓글 작성(contextPath+'/comment/insertComment' 비동기 POST요청, 성공시 'success' 실패시 'fail' 반환)
    - 성공 시 contextPath+"/chalComment/selectComment"로 get 비동기 요청. 파라미터 : currentPage=0
    / 댓글 초기화 버튼

  댓글 요청 객체
  public class ChallengeCommentRequest {
    private int commentNo;
    private int userNo;
    private int chalNo;
    private int recommentTarget;
    private String reply;
    
    private byte[] uuid; //사진 연결용 uuid
    private String uuidStr;
  }
S : '완료한 챌린지에요!'와 함께 적절한 아이콘(혹은 부트스트랩 아이콘) 표시
F : '실패한 챌린지에요...'와 함께 적절한 아이콘 표시
N : '참여하기' 버튼 표시. 해당 버튼 누르면 확인 모달창 으로 검증 후 contextPath+'/challenge/participate'로 post axios비동기 요청
  파라미터 : chalDetail.chalNo / 응답 : 성공시 "success", 실패 시 "fail"
  성공 시 (Y: 댓글 작성 영역 표시. )와 동일한 영역으로 교체
U : "로그인을 해 주세요" 표시
------------------------------------


사용되지 않은 객체 요소는 임의로 추가하지 말것
스크립트는 rightTopScript()함수로 감싸기
thymeleaf조각이라 스크립트 내 thymeleaf문법 사용 불가.
thymeleaf변수를 사용하려면 별도로 선언하기
id는 반드시 'right-top-'로 시작(id 충돌 방지)
css를 사용할 때는 id로 연결하기

날짜를 출력할 때는 thymeleaf-extras-java8time(#temporals.format)를 사용해서 적절한 포맷으로 출력

=============================================================================================
부트스트랩 등의 라이브러리는 선언되어 있다고 가정
부트스트랩과 적절한 부트스트랩 아이콘 등으로 간단하게 꾸미기
챌린지 참여/댓글 카드 순으로 보인다.

댓글 객체
public class ChallengeCommentResponse {
  private int commentNo;
  private int userNo;
  private int chalNo;
  private int recommentTarget;
  private LocalDateTime createDate;
  private String reply;
  private String status; //Y:활성, N:비활성, M:수정됨

  private String nick;//member
  
  private byte[] picture; //profile
  private String pictureBase64; //프론트와 base64로 소통
  private String isOpen; //Y:공개, N:참여한 챌린지 비공개, A:익명
}
List<ChallengeCommentResponse>가 model의 chalDetailComment에 담김

모든 댓글은 동적 생성된 카드에 담김
카드는 1열, 세로로 나열. 무한 스크롤 구현.
스크롤이 거의 밑에 다다르면 contextPath+"/chalComment/selectComment"로 get 비동기 요청
응답 : zip으로 압축된 댓글 사진들이 반환됨.
  예) ResponseEntity.ok()
        .header("Content-Type", "application/zip")
        .header("Content-Disposition", "attachment; filename=\"comment_images.zip\"")
        .body(zipBytes)
  사진은 webp형식, 각 사진 이름은 (commentNo)+'_'로 시작함. commentNo는 사진 대상 댓글.
요청할 때 사용하는 파라미터 ->
  chalNo=chalDetail.chalNo,
  currentPage : model의 currentPage에 현재 페이지를 담아 둠. 해당 값을 읽어와 +1해서 보내기
페이지가 처음 랜더링 될 때 댓글은 별도로 요청해야 함. currentPage=0 으로 요청하기

댓글 카드 양식 : status가 D이면 '삭제된 댓글이네요'만 표시
-------------------------------
프로필 사진(pictureBase64) / 닉네임(nick) : 이 두 요소는 isOpen이 A인 경우, '익명의 ROUTINE유저가 작성했어요'만 표시
댓글 사진 : 응답받은 zip파일에서 알아내기. 사진 없으면 비우기
댓글 내용(reply) : 없으면 비우기
작성일(createDate) / 수정됨(status) : status가 M일 때만 표시
댓글 수정(contextPath+"/chalComment/deleteComment"),삭제(contextPath+"/chalComment/updateComment")버튼
  -이 버튼은 chalDetailComment.userNo == loginUser.userNo 일 때만 보인다.
  -삭제 버튼을 누르면 확인 모달로 검증 후 post axios비동기 요청. 성공시 success, 실패시 fail 응답받음
    파라미터 : chalDetailComment.commentNo 이름 commentNo
  -수정 버튼을 누르면 위의 '댓글 작성 영역'과 동일한 영역이 동적으로 생성됨
    input의 value는 기존 댓글 내용 사용. 사진 업로드/댓글 텍스트 제출 방식은 '댓글 작성 영역'로직과 동일.
    기존 사진을 썸네일에 넣어 표시하기
    사진이 변경되지 않으면 uuidStr 파라미터에 '1' 넣어 반환
    다만 댓글 작성 취소 버튼을 두고 이를 누르면, input value가 초기화되고 수정 영역 숨김 처리
    (영역 삭제 금지 - 영역 삭제하면 수정하기를 다시 눌러도 영역이 동적 생성되지 않음.)
    axios 비동기 post요청, 성공시 success, 실패시 fail 응답받음
    파라미터 : chalDetailComment.commentNo 이름 commentNo
대댓글 작성(contextPath+"/chalComment/insertComment") 버튼
  -이 버튼을 누르면 위의 '댓글 작성 영역'과 동일한 영역이 동적으로 생성됨
    사진 업로드/댓글 텍스트 제출 방식은 '댓글 작성 영역'로직과 동일.
    다만 댓글 작성 취소 버튼을 두고 이를 누르면, input value가 초기화되고 대댓글 작성 영역 숨김 처리
    (영역 삭제 금지 - 영역 삭제하면 수정하기를 다시 눌러도 영역이 동적 생성되지 않음.)
    axios 비동기 post요청, 성공시 success, 실패시 fail 응답받음
    파라미터 : chalDetailComment.commentNo 이름 recommentTarget
-------------------------------

대댓글 카드 양식은 댓글 카드 양식과 동일.
chalDetailComment.recommentTarget이 있을 경우(0보다 클 경우) 대댓글임
recommentTarget은 대댓글 대상 댓글의 commentNo을 뜻함
댓글 밑에 다음 댓글 앞서 대댓글 표시
대댓글은 한번에 10개씩 조회됨
요청 경로 : contextPath+"/chalComment/selectRecomment", currentRecommentPage에 1을 더해 보내기
currentRecommentPage는 직접 계산. 초기값은 0으로, 대댓글 10개 이후부터 1씩 늘어나는 방식으로 구현
ex) 하나의 댓글에 대댓글 14개->currentRecommentPage=1, 대댓글 45개->currentRecommentPage=4
서버에서 별도로 조회되지 않은 대댓글이 남았는지 알려주지 않음. 대댓글이 10의 배수가 아니라면 
  '대댓글 더 보기' 버튼을 두고, 해당 버튼을 누르면 추가로 요청하는 방식
응답 : 댓글 내용은 model/사진은 압축되어 보내짐. 파싱 방법은 댓글 조회와 동일.
대댓글에 대댓글 작성은 불가능
삭제된 댓글(status가 D)에도 대댓글 표시
대댓글의 status가 D이면 '삭제된 댓글이네요'만 표시
  
  


사용되지 않은 객체 요소는 임의로 추가하지 말것
스크립트는 rightBottomScript()함수로 감싸기
thymeleaf조각이라 스크립트 내 thymeleaf문법 사용 불가.
thymeleaf변수를 사용하려면 별도로 선언하기
id는 반드시 'right-top-'로 시작(id 충돌 방지)
css를 사용할 때는 id로 연결하기

날짜를 출력할 때는 thymeleaf-extras-java8time(#temporals.format)를 사용해서 적절한 포맷으로 출력